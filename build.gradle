//Copyright Â© 2018 Dell Inc. or its subsidiaries. All Rights Reserved.
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.sonarqube'
apply plugin: 'com.github.hierynomus.license'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'signing'
apply plugin: 'maven'
//apply plugin: 'nebula.lint'

sourceCompatibility = 1.8
version = "${version}"
group = 'com.github.nortonluo'
archivesBaseName = "adapter-chassis"

buildscript {
   repositories {
    mavenLocal()
	maven {
		url "${artifactory_contextUrl}/libs-release"
		url "https://plugins.gradle.org/m2/"
	}
  }
  dependencies {
       classpath "io.spring.gradle:dependency-management-plugin:1.0.2.RELEASE"
       classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.15"
       classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.1"
       classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.1"
       //classpath 'com.netflix.nebula:gradle-lint-plugin:latest.release'
  }
}

//gradleLint {
  //rules  = ['dependency-parentheses','overridden-dependency-version','duplicate-dependency-class', 'all-dependency','unused-dependency']
//}
 
sonarqube {
    properties {
        property "sonar.projectName", "rackhd :: smi-lib-adapter-chassis"
        property "sonar.projectKey", "${group}:adapter-chassis"
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'adapter-chassis jar',
                   'Implementation-Version': version
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

javadoc {
    options {
         encoding = 'windows-1251'
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

repositories {
	mavenLocal()
	maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
	maven { url "https://oss.sonatype.org/content/repositories/releases" }
	maven { url "https://repo.maven.apache.org/maven2" }
}

ext {
	springVersion = '4.3.6.RELEASE'
}

dependencies {
    //compile project(':smi-lib-racadm')
    compile 'com.dell.isg.smi:racadmlib:1.0.35'
    compile 'com.dell.isg.smi:commons-elm:1.0.82'
    compile 'com.dell.isg.smi:commons-model:1.0.97'
    compile 'com.dell.isg.smi:commons-utilities:1.0.32'
    compile "org.springframework:spring-context:${springVersion}"
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.5'
    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.3'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.springframework', name: 'spring-test', version: '4.3.6.RELEASE'
}

test {
    systemProperties 'property': 'value'
}

uploadArchives {
	repositories {
		flatDir {
		   dirs 'repos'
		}
		mavenDeployer 
		{
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
			
			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}
	  
			pom.project {
				artifactId = "adapter-chassis"
				packaging 'jar'
				url 'https://www.github.com/rackhd/smi-lib-adapter-chassis'
				name 'SMI Adapter Chassis Library'
				description 'A Jar library with implementation logic for interfacing with a Dell Chassis'
				inceptionYear '2017'
				
				licenses {
					license {
						name 'The Apache Software License, Version 2.0'
						url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
						distribution 'repo'
					}
				}
				
				scm {
					connection 'scm:git:git://www.github.com/rackhd/smi-lib-adapter-chassis.git'
					developerConnection 'scm:git:ssh://www.github.com/rackhd/smi-lib-adapter-chassis.git'
					url 'http://www.github.com/rackhd/smi-lib-adapter-chassis'
				}
				
				developers {
					developer {
						id 'michaelsteven'
						name 'Michael Hepfer'
						email 'michael.hepfer@dell.com'
						organization 'Dell EMC Inc.'
						organizationUrl 'http://codedellemc.com'
						}
				}
				
			}
		}
	}
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    required { gradle.taskGraph.hasTask("artifactoryPublish") }
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication){
            artifact jar
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar
        }
    }
}

 license {
        header rootProject.file('license-template')
        includes(["**/*.java", "**/*.properties"])
        strictCheck true
        ignoreFailures true
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
    	ext.name = 'Dell Inc.'
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        defaults{ publications ("mavenJava")}
        repository {
	    // note: username and password being set by bamboo artifactory plugin
            maven = true
        }
    }
    resolve {
        repository {
            repoKey = 'libs-release'
            maven = true
        }
    }
}
